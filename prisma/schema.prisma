// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  username  String   @unique
  password  String
  level     String // admin, user
  status    String   @default("use") // use, delete
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FoodType {
  id        Int        @id @default(autoincrement())
  name      String
  remark    String?
  status    String     @default("use") // use, delete
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  FoodSizes FoodSize[]
  Tastes    Taste[]
  Foods     Food[]
}

model FoodSize {
  id         Int      @id @default(autoincrement())
  name       String
  remark     String?
  moneyAdded Int      @default(0)
  status     String   @default("use") // use, delete
  FoodTypeId Int
  FoodType   FoodType @relation(fields: [FoodTypeId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Taste {
  id         Int      @id @default(autoincrement())
  name       String
  remark     String?
  status     String   @default("use") // use, delete
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  FoodTypeId Int
  FoodType   FoodType @relation(fields: [FoodTypeId], references: [id])
}

model Food {
  id             Int              @id @default(autoincrement())
  name           String
  remark         String?
  price          Int
  img            String?
  foodType       String           @default("food") // food, drink
  status         String           @default("use") // use, delete
  FoodTypeId     Int
  FoodType       FoodType         @relation(fields: [FoodTypeId], references: [id])
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  SaleTemp       SaleTemp[]
  SaleTempDetail SaleTempDetail[]
}

model SaleTemp {
  id             Int              @id @default(autoincrement())
  qty            Int
  price          Int
  tableNo        Int
  userId         Int
  foodId         Int
  Food           Food             @relation(fields: [foodId], references: [id])
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  SaleTempDetail SaleTempDetail[]
}

model SaleTempDetail {
  id         Int      @id() @default(autoincrement())
  addedMoney Int?
  tasteId    Int?
  foodId     Int
  Food       Food     @relation(fields: [foodId], references: [id])
  saleTempId Int
  SaleTemp   SaleTemp @relation(fields: [saleTempId], references: [id])
}
